12/05/2015
- - - - - -
Got app working. Chose sockets over RESTful because events might come from the
machine and I don't want to be polling it on the time. 

Next steps:
> GUI button creates single frame
    - call exec
    - check dir for photo
> show frame in GUI
> switch creates single frame
> GUi is updated with latest frame in dir
> connection feedback on GUI and hardware


12/13/2015
- - - - - -
Working on using the exec() function to capture frame.

**NTS** The LED on the camera needs to be disabled to avoid light leakage. To do this,
you have to edit the /boot/config.txt file. This should be included in distro.

Capture time is too long. Focus and metering could be holding it up.

In looking for info on what is not fully manual, I came across this thread
that points to many other layers beyond the scripted interface of the camera's
functionality: https://github.com/raspberrypi/userland/issues/151. It includes
discussion of EV and vignette compensation that should be looked into.

For now, I'm going to try the original poster's strategy of using EV to get a
consistent result. He still reports slight variations, though, which may be
trouble for Kinograph. Should also look into exactly what I can do with raw
option.

The frame is being taken, but the light stays on, implying that the camera
process is not killed when taking just one frame. This also means the callback
Im using to signal the end of the process is never being called. A hack might
be to look at the output directory and when a new file is written, call a
function. Will need to verify that this can be done when the file is closed,
not upon creation. 

Turns out you can do this by looking for a "rename" event, which signals a
file being changed from a temp file to a permanent one. I'm using the watch
module for this but in the raspicam module there is a way to do this without
the watch module.

ALso worth looking into is the mode of shooting stills that utilizes signal
mode, which allwos the camera process to stay open and capture new still
everytime a signal is sent. Sounds better.

1. get camera ready -build exec string and launch raspistill app
2. send a signal each time frame is called, set K.ready to false
3. when new file 'rename' event detected, reset K.ready to true
4. when done, kill camera using process id.

watch isn't really working. will try checking number of files in a while loop
next.


12/20/2015
- - - - - -
OUTLINE
1. Verify frame is being taken and stored properly.
2. Find a way to determine when the file is done being written 
   a. callback in exec
   b. scan output directory
3. calculate the time it's taking to take a frame and save it. That's my
current fps.
   a. acceptable? move on.
   b. not acceptable? by how much, and what are my options.

Ways to get a process id (PID):
   1. when using the exec function, set it equal to a variable so an object is
created. In the callback, call the variable(object) name.pid.
   2. use the linux command 'pgrep <app>', ex 'pgrep raspistill'


01/08/2016
- - - - - -
Need to determine time it takes to take 1 frame. Currently, the exec function
calls the raspistill program with a '-t' timeout flag of 1 second. Calling it
with zero makes it stay on infinitely. 

Trying to implement signal mode. See raspistill documentation. 

According to forums (see raspiFastCamD), the Pi isn't capable of doing
anything very fast. Someone on that forum had a Python implementation that
achieved 1.7fps but at 640x480 resolution. 

Could it be that my machine can only run at 1fps? I don't think people will
care. 

If that's the case, I probably don't have to worry about making it run faster.
As long as the 1fps works reliably (i.e. no black frames or missed frames).
Will test that now. 

1fps seems to work fine. I'm going to move on and if I need to get something
faster, I can bring in a developer later or even push a firmware update after
the units are out. 

NEXT: get the switch to activate the frame capture.
THEN: add a motor that listens for when to move and when to stop according to
the switch state.


01/09/2016
- - - - - -
Got the switch working and capture working at 1fps. Will give the code to
community to help me make it faster when I'm ready to release.

As for the motor - will come back to this. 

NEXT: Frame button in GUI -> display frame on screen + all camera settings. 
NEXT: adjust settings, take new frame, update everything. 

-first slider working. need to hook it up to the app so that it actually
changes the setting in the Kinograph object.

Also, found this thread that explains why timeout works the way it does and
verifies that getting it to work differently will take some chops:
https://github.com/raspberrypi/userland/issues/212

In the thread, it mentions that the reason for the long time it takes to take
a single shot is that the camera has to power up before it takes the shot each
time. I wonder if I can get around that through timelapse functions - but
the one included doesn't come with a trigger setting. And the signal mode only
works for one frame. (TBC)

OKAY - maybe not true.

NEXT - try runing -t 0 and using signal mode. That might do it. 

FIRST - I'm going to try my phone. If I can get a decent recording and pull
the frames out when the film is still then I have a better and cheaper
solution. Will require a sound signature generated to signal a still frame so
automated frame extraction will be easier in post. This will also require
writing an iOS app. Eugh. Godammit. 


01/16/2016
- - - - - -
Got the slider working with mouseup out of the element, sending the data in a
single event, receiving the data, and updating the K.camera object. Also
cleaned up some of the verbose console.log calls. 

NEXT: more sliders.
THEN: get the frame working.


01/17/2016
- - - - - -
Sliders electric.

